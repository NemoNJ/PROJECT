#define DC_motor1 25
#define DC_motor2 26
#define button_start 34
#define button_end 35

bool DC_STATE = true;
int Power[] = {0, 80, 150,200,255};
int level = 3;
volatile bool mode = 1;
volatile bool start_DC = true;

volatile int updatetime_DC = 0;
volatile int last_updatetime_DC = 1000;
volatile int randNum = 1;

void IRAM_ATTR DC_start_ISR() {
    DC_STATE = true;
}

void IRAM_ATTR DC_end_ISR() {
    DC_STATE = false;
}

void DC_control_mode1_Science() {
    if (DC_STATE) {
        analogWrite(DC_motor1, Power[2]);
        delay(1);
        analogWrite(DC_motor2, Power[0]);
        delay(1);
    } else {
        analogWrite(DC_motor1, Power[0]);
        delay(1);
        analogWrite(DC_motor2, Power[2]);
        delay(1);
    }
}

void DC_control_mode2_GamePlay() {
    updatetime_DC = millis();

    if (DC_STATE) {
      Serial.println("BIAS");
        switch (level) {
            case 1:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
            case 2:
                analogWrite(DC_motor1, Power[2]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
            case 3:
                analogWrite(DC_motor1, Power[4]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
           case 4:
                if (updatetime_DC - last_updatetime_DC >= 1700) {
                    randNum += 1;
                    if(randNum == 3) randNum = 0;
                    last_updatetime_DC = updatetime_DC;
                }
                analogWrite(DC_motor1, Power[randNum]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
            case 5:
                if (updatetime_DC - last_updatetime_DC >= 1000) {
                    randNum += 1;
                    if(randNum > 5) randNum = 1;
                    last_updatetime_DC = updatetime_DC;
                }
                analogWrite(DC_motor1, Power[randNum]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
            default:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
        }
    } else {
      Serial.println("FORWARD");
        switch (level) {
            case 1:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
                break;
            case 2:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[2]);
                delay(1);
                break;
            case 3:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[4]);
                delay(1);
                break;
           case 4:
                if (updatetime_DC - last_updatetime_DC >= 1700) {
                    randNum += 1;
                    if(randNum == 3) randNum = 0;
                    last_updatetime_DC = updatetime_DC;
                }
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[randNum]);
                delay(1);
                break;
            case 5:
                if (updatetime_DC - last_updatetime_DC >= 1000) {
                     randNum += 1;
                    if(randNum > 5) randNum = 1;
                    last_updatetime_DC = updatetime_DC;
                }
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[randNum]);
                delay(1);
                break;
            default:
                analogWrite(DC_motor1, Power[0]);
                delay(1);
                analogWrite(DC_motor2, Power[0]);
                delay(1);
        }
    }
}

void DC_start() {

    analogWrite(DC_motor1, Power[1]);
    delay(1);
    analogWrite(DC_motor2, Power[0]);
    delay(1);
}

void DC_control() {
   if (start_DC) {
            DC_start();
            start_DC = false;
    }
    if (mode == 1) {
        DC_control_mode1_Science();
    } if(mode == 0){
        DC_control_mode2_GamePlay();
    }
}

void setup() {
    pinMode(DC_motor1, OUTPUT);
    pinMode(DC_motor2, OUTPUT);
    pinMode(button_start, INPUT_PULLUP);
    pinMode(button_end, INPUT_PULLUP);
    Serial.begin(9600);
    attachInterrupt(digitalPinToInterrupt(button_start), DC_start_ISR, FALLING);
    attachInterrupt(digitalPinToInterrupt(button_end), DC_end_ISR, FALLING);
    
   randomSeed(analogRead(0));
}

void loop() {
    DC_control();
}
